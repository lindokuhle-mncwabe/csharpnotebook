#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

Refactor Into Pure Function
---------------------------

```csharp

using System;
using static System.Console;

public static void CompareTwoStringsImpurely() {
  WriteLine("Enter the first value: ");
  var str1 = ReadLine();
  WriteLine("Enter the second value: ");
  var str2 = ReadLine();
  var compare = str1.CompareTo(str2); // buseness logic
  if (compare > 0) {
    WriteLine("The first value is greater than the second value.");
  } else if (compare < 0) {
    WriteLine("The first value is less than the second value.");
  } else {
    WriteLine("The first value is equal to the second value.");
  }
  // What's wrong with this code design?
  // 1. It is not testable. why? because it has no input and no output
  // 2. It is not reusable. why? because it has IO
  // 3. It is not composable. why? because it has IO
  // 4. It is not pure. why? because it has IO
}

// Let's fix this by separating the IO from the business logic
// This function should not care about where the input comes from
// Keyboard, File, Database etc.

// Firstly: I want to define a data type that represents the decision
public enum StringCompareResult {
  Bigger,
  Smaller,
  Equal
}

// Secondly: I want to define a pure function that takes two strings
// and returns the decision
public static StringCompareResult CompareTwoStringsPurely(string str1, string str2) {
  var compare = str1.CompareTo(str2);
  if (compare > 0) {
    return StringCompareResult.Bigger;
  } else if (compare < 0) {
    return StringCompareResult.Smaller;
  } else {
    return StringCompareResult.Equal;
  }
}

// Thirdly: I want to build the IO around the pure function
public static void CompareTwoStringsShell() {
  // I/O code | Read from console | could Read from Db
  WriteLine("Enter the first value: ");
  var str1 = ReadLine();
  WriteLine("Enter the second value: ");
  var str2 = ReadLine();

  // Pure unchanging code
  var result = CompareTwoStringsPurely(str1, str2);

  // I/O code | Write to console | could Write to Db
  switch (result) {
    case StringCompareResult.Bigger:
      WriteLine("The first value is greater than the second value.");
      break;
    case StringCompareResult.Smaller:
      WriteLine("The first value is less than the second value.");
      break;
    case StringCompareResult.Equal:
      WriteLine("The first value is equal to the second value.");
      break;
  }
}

/*------------------------------------------------------------------------*\
  Given Input when str1='a' and str2='b' return StringCompareResult.Bigger
\*------------------------------------------------------------------------*/

// Test# 1
WriteLine("Given Input when str1='a' and str2='b'-> Smaller");
WriteLine("Test #1: {0}", 
  (StringCompareResult.Smaller.ToString()         // expected
  ==
  CompareTwoStringsPurely("a", "b").ToString())  // actual
  == true ? "Passed" : "Failed!");

WriteLine("-------------------------------------------------------");
WriteLine("Given Input when str1='b' and str2='a'-> Bigger");
WriteLine("Test #2: {0}", 
  (StringCompareResult.Bigger.ToString()         // expected
  ==
  CompareTwoStringsPurely("b", "a").ToString())  // actual
  == true ? "Passed" : "Failed!");

WriteLine("-------------------------------------------------------");
WriteLine("Given Input when str1='a' and str2='a'-> Equal");
WriteLine("Test #3: {0}", 
  (StringCompareResult.Equal.ToString()         // expected
  ==
  CompareTwoStringsPurely("a", "a").ToString())  // actual
  == true ? "Passed" : "Failed!");

```
