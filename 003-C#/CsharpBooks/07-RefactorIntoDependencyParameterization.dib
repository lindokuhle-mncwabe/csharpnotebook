#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

Refactoring from Dependency Injection to Dependency Parameterization
--------------------------------------------------------------------

```csharp

using System;
using System.Collections.Immutable;
using System.Text.Json;
using static System.Console;

// -------------------------------------------
// Refactoring from Dependency Injection to 
// Dependency Parameterization
//--------------------------------------------

/*--------------------------------------------------------------
  Customer Data and Actions
--------------------------------------------------------------*/

public record Customer(Guid CustomerId,
  string FirstName, string LastName, string Email, string Phone
)
{
  public static Customer MapCustomerCreateCommandToCustomer(
    CustomerCreateCommand command
  ) => new Customer(Guid.NewGuid(), 
         command.FirstName, command.LastName, 
         command.Email, command.Phone
       );

  public static CustomerCreateCommand BuildCustomerCreateCommand(
    string firstName, string lastName, string email, string phone
  ) => new CustomerCreateCommand(firstName, 
         lastName, email, phone
       );

  public static (CustomerData, Error) MapCustomerCreateResult(
    Customer customer, Error error
  ) 
  {
    if (error != null)
    { 
      return (null, error);
    }
    var data = new CustomerData(customer.CustomerId, 
      customer.FirstName, customer.LastName, 
      customer.Email, customer.Phone
    );
    return (data, null);
  }
}
public record CustomerCreateCommand(string FirstName,
  string LastName, 
  string Email, 
  string Phone
);
public record CustomerData(Guid CustomerId,
  string FirstName, 
  string LastName, 
  string Email, 
  string Phone
);
public record CustomerReadRequest(Guid CustomerId);

public static ImmutableHashSet<Customer> _customerDb = 
  ImmutableHashSet<Customer>.Empty;

public record CreateCustomerHandler
{
  public static async Task<(CustomerData, Error)> Handle(
    CustomerCreateCommand command,
    CreateCustomerAction createCustomer
  ) 
  {
    var customer = 
      Customer.MapCustomerCreateCommandToCustomer(command);
    var result = Customer.MapCustomerCreateResult(customer, null);
    // Save customer to database
    await createCustomer(customer);
    return await Task.FromResult(result);
  }
}

public record ReadCustomerHandler
{
  public static async Task<(CustomerData, Error)> Handle(
    CustomerReadRequest request,
    ReadCustomerAction readCustomer
  ) 
  {
    var customer = await readCustomer(request);
    var result = Customer.MapCustomerCreateResult(customer, null);
    return await Task.FromResult(result);
  }
}

// Actions Defs
public delegate Task<(Customer, Error)> CreateCustomerAction(
  Customer customer
);
public delegate Task<Customer> ReadCustomerAction(
  CustomerReadRequest request
);

// Actions Handlers
public async static Task<(Customer, Error)> CreateCustomerActionHandlerAsync(
  Customer customer
) 
{
  // depends on data store or api resource
  _customerDb = _customerDb.Add(customer);
  (Customer, Error) result = (customer, null);
  return await Task.FromResult(result);
}
public async static Task<Customer> ReadCustomerActionHandlerAsync(
  CustomerReadRequest request
) 
{
  // depends on data store or api resource
  var customer = _customerDb.FirstOrDefault(c => 
    c.CustomerId == request.CustomerId
  );
  return await Task.FromResult(customer);
}

/*--------------------------------------------------------------
  Shared
--------------------------------------------------------------*/

public record EmailMessage(string From,
  string To,
  string Subject,
  string Body);

public record Error(string Message);

/*--------------------------------------------------------------
  Tests to Run
--------------------------------------------------------------*/
void Describe(string description){}

/*--------------------------------------------------------------
  Test #1 : Customer.BuildCustomerCreateCommand
--------------------------------------------------------------*/
{
  Describe(
    @"When Customer.BuildCustomerCreateCommand is called with 
    firstName='Jane', 
    lastName='Parker'
    email='jane.parker@dependencyinjection.com'
    and phone='123-456-7890'
    then CustomerCreateCommand with correct data should be returned."
  );

  // Arrange
  var data = new {
    FirstName = "Jane",
    LastName = "Parker",
    Email = "jane.parker@dependencyinjection.com",
    Phone = "123-456-7890"
  };

  // Act
  CustomerCreateCommand sut = Customer.BuildCustomerCreateCommand(
    data.FirstName,
    data.LastName,
    data.Email,
    data.Phone
  );

  // Assert
  var assertPass = (
    sut.FirstName == data.FirstName &&
    sut.LastName == data.LastName &&
    sut.Email == data.Email &&
    sut.Phone == data.Phone
  );

  WriteLine("Test #1: {0}", assertPass 
    ? "Passed [:-)" : "Failed [:-(");

  // Output
  if (!assertPass) 
  {
    WriteLine(
      @"[Actual: 
      FirstName = {0}, 
      LastName  = {1}, 
      Email     = {2}, 
      Phone     = {3}]", 
      sut.FirstName, 
      sut.LastName, 
      sut.Email, 
      sut.Phone
    );
  }
}

/*--------------------------------------------------------------
  Test #2 : Customer.MapCustomerCreateCommandToCustomer
--------------------------------------------------------------*/
{
  Describe(
    @"When CustomerMapper.MapCustomerCreateCommandToCustomer is called with 
    firstName='Jane', 
    lastName='Parker'
    email='jane.parker@dependencyinjection.com'
    and phone='123-456-7890'
    then Customer with correct data should be returned."
  );

  // Arrange
  var data = new {
    FirstName = "Jane",
    LastName = "Parker",
    Email = "jane.parker@dependencyinjection.com",
    Phone = "123-456-7890"
  };
  CustomerCreateCommand command = Customer.BuildCustomerCreateCommand(
    data.FirstName,
    data.LastName,
    data.Email,
    data.Phone
  );

  // Act
  Customer sut = 
    Customer.MapCustomerCreateCommandToCustomer(command);

  // Assert
  var assertPass = (
    sut.FirstName == command.FirstName &&
    sut.LastName == command.LastName &&
    sut.Email == command.Email &&
    sut.Phone == command.Phone
  );

  WriteLine("Test #2: {0}", assertPass 
    ? "Passed [:-)" : "Failed [:-(");

  if (!assertPass) 
  {
    WriteLine(
      @"[Actual: 
      FirstName = {0}, 
      LastName  = {1}, 
      Email     = {2}, 
      Phone     = {3}]", 
      sut.FirstName, 
      sut.LastName, 
      sut.Email, 
      sut.Phone
    );
  }
}

/*--------------------------------------------------------------
  Test #3 : CreateCustomerHandler.Handle
--------------------------------------------------------------*/
{
  Describe(
    @"When CreateCustomerHandler.Handle is called with command 
    FirstName='Jane', 
    LastName='Parker'
    Email='jane.parker@dependencyinjection.com'
    and Phone='123-456-7890'
    then Customer with correct data should be created & returned."
  );

  // Arrange
  var data = new {
    FirstName = "Jane",
    LastName = "Parker",
    Email = "jane.parker@dependencyinjection.com",
    Phone = "123-456-7890"
  };
  CustomerCreateCommand command = Customer.BuildCustomerCreateCommand(
    data.FirstName,
    data.LastName,
    data.Email,
    data.Phone);

  // Act
  (CustomerData, Error) sut = 
    await CreateCustomerHandler.Handle(command, 
      CreateCustomerActionHandlerAsync
    );

  // Assert
  var (customerData, _) = sut;
  var assertPass = (
    customerData.CustomerId != Guid.Empty &&
    customerData.FirstName == command.FirstName &&
    customerData.LastName == command.LastName &&
    customerData.Email == command.Email &&
    customerData.Phone == command.Phone
  );

  WriteLine("Test #3: {0}", assertPass 
    ? "Passed [:-)" : "Failed [:-(");

  if (!assertPass) 
  {
    WriteLine(
      @"[Actual: 
      FirstName  = {0}, 
      LastName   = {1}, 
      Email      = {2}, 
      Phone      = {3},
      CustomerId = {4}]", 
      customerData.FirstName, 
      customerData.LastName, 
      customerData.Email, 
      customerData.Phone,
      customerData.CustomerId);
  }
}

/*--------------------------------------------------------------
  Test #4 : CreateCustomerHandler.Handle
--------------------------------------------------------------*/
{
  Describe(
    @"When CreateCustomerHandler.Handle is called with command 
    FirstName='Jane', 
    LastName='Parker'
    Email='jane.parker@dependencyinjection.com'
    and Phone='123-456-7890'; and passing parameterized dependency
    for storing customer in the database and can be retrieved later; 
    then Customer with correct data should be created & returned."
  );

  // Arrange
  var data = new {
    FirstName = "Jane",
    LastName = "Parker",
    Email = "jane.parker@dependencyinjection.com",
    Phone = "123-456-7890"
  };
  CustomerCreateCommand command = Customer.BuildCustomerCreateCommand(
    data.FirstName,
    data.LastName,
    data.Email,
    data.Phone
  );

  // Act
  (CustomerData, Error) sut = 
    await CreateCustomerHandler.Handle(command, 
      CreateCustomerActionHandlerAsync
    );

  // Assert
  var (customerData, _) = sut; 
  var assertPass = (
    customerData.CustomerId != Guid.Empty &&
    customerData.FirstName == command.FirstName &&
    customerData.LastName == command.LastName &&
    customerData.Email == command.Email &&
    customerData.Phone == command.Phone
  );

  WriteLine("Test #4A: {0} --data write", assertPass 
    ? "Passed [:-)" : "Failed [:-(");

  (CustomerData, Error) sutB = await ReadCustomerHandler.Handle(
    new CustomerReadRequest(customerData.CustomerId), 
    ReadCustomerActionHandlerAsync
  );

  var (customerDataB, _) = sutB;
  var assertPassB = (
    customerDataB.CustomerId == customerData.CustomerId
  );

  WriteLine("Test #4B: {0} --data read", assertPassB 
    ? "Passed [:-)" : "Failed [:-(");

  if (!assertPass) 
  {
    WriteLine(
      @"[Actual: 
      FirstName  = {0}, 
      LastName   = {1}, 
      Email      = {2}, 
      Phone      = {3},
      CustomerId = {4}]", 
      customerData.FirstName, 
      customerData.LastName, 
      customerData.Email, 
      customerData.Phone,
      customerData.CustomerId);
  }
}

/*
public delegate Task<Customer> ReadCustomerAction(CustomerRead request);
public delegate Task UpdateCustomerAction(Customer customer);
public delegate Task SendEmailMessageAction(EmailMessage message);
*/

```
