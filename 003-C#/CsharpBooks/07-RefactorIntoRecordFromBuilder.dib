#!meta

{"kernelInfo":{"defaultKernelName":"csharp","items":[{"aliases":[],"name":"csharp"}]}}

#!markdown

Refactor Into Fluent Build
--------------------------
```csharp

using System;
using System.Collections.Immutable;
using System.Text.Json;
using System.Text.Json.Serialization;
using static System.Console;

#nullable enable

/*--------------------------------------------------------------
  The Fluent Builder Pattern
--------------------------------------------------------------*/
public enum Size { Small, Medium, Large }
public enum DoughType { Thin, Thick }
public enum SauceType { Tomato, White }
public enum ToppingType { Cheese, Pepperoni, Sausage, Bacon, Pineapple, Onion, Mushroom, Olive, Pepper }
public enum HerbType { Oregano, Basil, Parsley, None }

public class Pizza
{
    public DoughType Dough { get; }
    public SauceType Sauce { get; }
    public ImmutableList<ToppingType> Toppings { get; }
    public HerbType Herb { get; }
    public Size Size { get; }
    
    public Pizza(Size size, DoughType dough, SauceType sauce, ImmutableList<ToppingType> toppings, HerbType herb)
    {
        Size = size;
        Dough = dough;
        Sauce = sauce;
        Toppings = toppings;
        Herb = herb; 
    }
}

public class PizzaBuilder
{
    private Size? _size;
    private DoughType? _dough;
    private SauceType? _sauce;
    private List<ToppingType> _toppings = new();
    private HerbType? _herb;

    public PizzaBuilder WithSize(Size size) {
        _size = size;
        return this;
    }

    public PizzaBuilder WithDough(DoughType dough) {
        _dough = dough;
        return this;
    }

    public PizzaBuilder WithSauce(SauceType sauce) {
        _sauce = sauce;
        return this;
    }

    public PizzaBuilder WithTopping(ToppingType topping) {
        _toppings.Add(topping);
        return this;
    }

    public PizzaBuilder WithHerb(HerbType herb) {
        _herb = herb;
        return this;
    }

    public Pizza Build() {
        return new Pizza(
            _size ?? throw new InvalidOperationException("Size is required"),
            _dough ?? throw new InvalidOperationException("Dough is required"),
            _sauce ?? throw new InvalidOperationException("Sauce is required"),
            _toppings.ToImmutableList(),
            _herb ?? HerbType.None
        );
    }

    public static implicit operator Pizza(PizzaBuilder builder) => builder.Build();
}

Pizza pizza = new PizzaBuilder()
    .WithSize(Size.Large)
    .WithDough(DoughType.Thin)
    .WithSauce(SauceType.Tomato)
    .WithTopping(ToppingType.Cheese)
    .WithTopping(ToppingType.Pepperoni)
    .WithTopping(ToppingType.Sausage)
    .WithHerb(HerbType.Oregano);

Console.WriteLine("Pizza:");
Console.WriteLine(JsonSerializer.Serialize(pizza, new JsonSerializerOptions 
{ 
    WriteIndented = true,
    Converters = { new JsonStringEnumConverter() } 
}));

// Output: {"Dough":"Thin","Sauce":"Tomato","Toppings":["Cheese","Pepperoni","Sausage"],"Herb":"Oregano","Size":"Large"}

/*--------------------------------------------------------------
  Using C# Records
--------------------------------------------------------------*/

public record BetterPizza(Size Size, DoughType Dough)
{
    public SauceType? Sauce { get; set; }
    public ImmutableHashSet<ToppingType>? Toppings {get; set; } = ImmutableHashSet<ToppingType>.Empty;
    public HerbType? Herb {get; set; }

    public static BetterPizza CreateDefault() => new BetterPizza(Size.Small, DoughType.Thin);
}

BetterPizza betterPizza = BetterPizza.CreateDefault()
    with { 
        Sauce = SauceType.White,
        Toppings = ImmutableHashSet.Create(ToppingType.Cheese, ToppingType.Pepperoni, ToppingType.Sausage),
        Herb = HerbType.Oregano
    };

Console.WriteLine("------------------------------------------------------");
Console.WriteLine("BetterPizza:");
Console.WriteLine(JsonSerializer.Serialize(betterPizza,
new JsonSerializerOptions 
{ 
    WriteIndented = true,
    Converters = { new JsonStringEnumConverter() } 
}));

// Output: {"Size":"Small","Dough":"Thin","Sauce":"White","Toppings":["Cheese","Pepperoni","Sausage"],"Herb":"Oregano"}

```
